name: Arduino CI

on: [push, pull_request]

jobs:
  build-sketches:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repo
        uses: actions/checkout@v2
      - name: Install Arduino CLI
        uses: arduino/setup-arduino-cli@v1.1.1
      - name: Get Python3
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
      - name: Fetch sketch dependencies
        run: |
          pip3 install pyserial
          arduino-cli core update-index --additional-urls "https://dl.espressif.com/dl/package_esp32_index.json"
          arduino-cli core install esp32:esp32 --additional-urls "https://dl.espressif.com/dl/package_esp32_index.json"
          arduino-cli core install arduino:avr
          arduino-cli lib install "Smartcar shield"
      - name: Build sketch
        run: |
          arduino-cli compile -b arduino:avr:uno sketches/calculator/calculator.ino
          arduino-cli compile -b esp32:esp32:esp32doit-devkit-v1 sketches/MagicCarController/SmartcarWebserver.ino
          arduino-cli compile -b esp32:esp32:esp32doit-devkit-v1 sketches/MagicCarControllerTestable/MagicCarControllerTestable.ino

  run-unit-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, windows-latest]
        compiler: [gnu, clang, msvc]

        exclude:
        - os: ubuntu-18.04
          compiler: msvc

        - os: windows-latest
          compiler: gnu
        
        - os: windows-latest
          compiler: clang

        include:
        - os: ubuntu-18.04
          nproc: "-j$(nproc)"
          mkdir_force: -p
        
        - os: windows-latest
          mkdir_force: -Force

        - compiler: gnu
          cc: gcc-9
          cxx: g++-9

        - compiler: clang
          cc: clang-9
          cxx: clang++-9

        - compiler: msvc
          cc: cl
          cxx: cl


    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}
      build_dir: build

    steps:
      - uses: actions/checkout@v2
      - name: Get dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y ${{ matrix.cc }}
          sudo apt-get install -y ${{ matrix.cxx }}
      - name: Create unit test build directory
        run: mkdir ${{ matrix.mkdir_force }} ${{ env.build_dir }}
      - name: Configure unit tests
        run: cd ${{ env.build_dir }} && cmake ..
      - name: Build unit tests
        run: cmake --build ${{ env.build_dir }} -- ${{ matrix.nproc }}
      - name: Run unit tests
        run: cd ${{ env.build_dir }} && ctest
